Project Requirements
    - In this project, you will apply Object-Oriented Programming (OOP) principles in Python to develop an advanced Library Management System. This command-line-based application is designed to streamline the management of books and resources within a library. Your mission is to create a robust system that allows users to browse, borrow, return, and explore a collection of books while demonstrating your proficiency in OOP principles and the use of modules.

Enhanced User Interface (UI) and Menu:

    - Create an improved, user-friendly command-line interface (CLI) for the Library Management System with separate menus for each class of the system.
```
Welcome to the Library Management System!
Main Menu:
1. Book Operations
2. User Operations
3. Author Operations
4. Genre Operations
5. Quit

Book Operations:
```
Book Operations:
1. Add a new book
2. Borrow a book
3. Return a book
4. Search for a book
5. Display all books
    ```


Member Operations:
```
Member Operations:
1. Add a new member
2. View user details
3. Display all users
    ```

Author Operations:
```
Author Operations:
1. Add a new author
2. View author details
3. Display all authors
    ```
Genre Operations:
```
Genre Operations:
1. Add a new genre
2. View genre details
3. Display all genres
    ```

Class Structure:
    - Implement a class structure that represents key entities in the library management system, including:
        - Book: A class representing individual books with attributes such as title, author, ISBN, genre, publication date, and availability status.
        - User: A class to represent library users with attributes like name, library ID, and a list of borrowed book titles.
        - Author: A class representing book authors with attributes like name and biography.
        - Genre: A class representing book genres with attributes like name, description, and category.

Encapsulation:
    - Apply encapsulation principles by defining private attributes and using getters and setters for necessary data access.

Inheritance and Polymorphism:
    - Utilize inheritance to create specialized book categories (e.g., Fiction, Non-fiction, Mystery) that inherit common properties and methods from the base Book class. Overload methods as needed in the subclasses. For example, in a subclass FictionBook, you can override the __str__ method to include additional information specific to fiction books.

Modules:
    - Organize your code into modules to promote code organization and maintainability. Create separate modules for classes, user interactions, and error handling.

Menu Actions:
    - Implement the following actions in response to menu selections using the classes you've created:
        - Adding a new book with all relevant details.
        - Allowing users to borrow a book, marking it as "Borrowed."
        - Allowing users to return a book, marking it as "Available."
        - Searching for a book by its unique identifier (ISBN or title) and displaying its details.
        - Displaying a list of all books with their unique identifiers.
        - Adding a new user with user details.
        - Viewing user details.
        - Displaying a list of all users.
        - Adding a new author with author details.
        - Viewing author details.
        - Displaying a list of all authors.
        - Adding a new genre with genre details.
        - Viewing genre details.
        - Displaying a list of all genres.
        - Quitting the application.

User Interaction:
    - Utilize the input() function within the appropriate menus to enable users to interact with the CLI and select menu options.
    
    - Implement input validation using regular expressions (regex) to ensure the correct formatting of user input.

Error Handling:
    - Implement error handling using try, except, else, and finally blocks to manage potential issues gracefully, such as incorrect user input or file operations.

GitHub Repository:
    - Create a GitHub repository for your project and commit code regularly.

    - Maintain a clean and interactive README.md file in your GitHub repository, providing clear instructions on how to run the application and explanations of its features.
    
    - Include a link to your GitHub repository in your project documentation.

Optional Bonus Points
    - Text File Handling (Bonus): Implement text file handling to load and save data for various entities in the library management system, such as books, users, authors, and genres. Create dedicated text files for each entity type and develop methods to read data from these files during system startup and save data to them when changes occur. Ensure data integrity and error handling during file operations.

    - Reservation System (Bonus): Enhance the system by implementing a reservation system. Users can reserve books that are currently unavailable, and the system will notify them when the book becomes available. Develop methods to handle reservations, check availability, and notify users of reservation status changes.

    - Fine Calculation (Bonus): Implement a fine calculation system for overdue books. Assign due dates to borrowed books, and calculate fines for users who exceed the due date. Develop a mechanism for users to pay fines and update their accounts accordingly.

Project Tips
    - Begin by designing a class hierarchy that represents the library's structure and entities.
    - Test your code iteratively as you implement each feature to identify and address any potential bugs or issues.
    - Collaborate with peers, seek assistance, and remember that learning is a collaborative effort.

Book Class:
    - The Book class should have the following attributes:
        - Title
        - Author
        - ISBN
        - Genre
        - Publication Date
        - Availability Status
        - It will also have a due date that initializes as none and a member variable that stores the user who has borrowed the book.
    - It has methods to:
        - Display book details
            - returns the title, author, isbn, genre, publication date, and availability status
        - Add a  book to the catalog
            - creates a new_book dictionary from the attributes of the book object. The key is the title of the book and the value is the new_book dictionary.
            * appends the new_book dictionary to the catalog text file for future reference.
        - Check book availability
            - returns the availability status of the book
        - Borrow a book
            - changes the availability status of the book to borrowed
            - sets the due date to 14 days from the current date
            - sets the member variable to the user who borrowed the book
            ** updates the catalog text file with the new availability status
            - runs the member_name.add_borrowed_book method
                - adds the title of the borrowed book to the borrowed books list of the member
                ** updates the members text file with the new borrowed books list
        - Return a book
            - changes the availability status of the book to available
            - sets the due date to none
            - sets the member variable to none
            ** updates the catalog text file with the new availability status

Member Class:
    - The Member class should have the following attributes:
        - Name
        - Phone Number
        - Email Address
        - Library ID
        - Borrowed Books - initializes as an empty dictionary - stores the titles of the books borrowed by the member and the due dates.
        - Fines - initializes as 0
    - It has methods to:
        - Display member details
            - returns the name, library id, email address, phone number, address, and borrowed books of the member
        - Add a member to the library
            - creates a new_member dictionary from the attributes of the member object. The key is the library id of the member and the value is the new_member dictionary.
            * appends the new_member dictionary to the members text file for future reference.
        - add_borrowed_book method
            - adds the title of the borrowed book to the borrowed books list of the member
            ** updates the members text file with the new borrowed books list
        - Return a book
            - removes the title of the returned book from the borrowed books list of the member
            ** updates the members text file with the new borrowed books list
        - Pay fines
            - subtracts the amount paid from self.fines.
            - updates the members text file with the new fines amount
        - Add fines
            - adds the amount to self.fines
            - updates the members text file with the new fines amount


Library Class:
    - The Library class should have the following attributes:
        - Catalog - initializes as a text file that stores the isbn of the books and their details.
        - Members - initializes as a text file that stores the library id of the members and their details.
        - Name - the name of the library
        - Address - the address of the library
        - Possibly will have a calendar attribute to keep track of the current date and events at the library.
    - It has methods to:
        - Display the catalog
            - reads the catalog text file and prints the contents
        - Display the members
            - reads the members text file and prints the contents
        - Search by title
            - searches for a book by its title in the catalog text file
            - returns the book details
        - Search by author
            - searches for an author by their name in the catalog text file
            - returns all the books written by the author
        - Search by genre
            - searches for a genre by its name in the catalog text file
            - returns all the books in the genre
